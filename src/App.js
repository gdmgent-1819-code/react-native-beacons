/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  DeviceEventEmitter,
  ListView,
  Platform,
  StyleSheet,
  Text,
  View
} from 'react-native';

/*
Libraries
*/
import Beacons from 'react-native-beacons-manager';
import moment   from 'moment';
import { NotificationsAndroid } from 'react-native-notifications';

/*
Constants
*/

const region = {
  identifier: 'nmdBeacons',
  uuid: 'B9407F30-F5F8-466E-AFF9-25556B57FE6D'
};

const TIME_FORMAT = 'MM/DD/YYYY HH:mm:ss';

type Props = {};
export default class App extends Component<Props> {
  // iBeacon events
  beaconsDidRangeEvent = null;
  regionDidEnterEvent = null;
  regionDidExitEvent = null;

  constructor(props) {
    super(props);

    this.state = {
      rangingDataSource:     new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2}).cloneWithRows([]),
      regionEnterDatasource: new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2}).cloneWithRows([]),
      regionExitDatasource:  new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2}).cloneWithRows([]),

      bluetoothState: '',
     };
  }

  componentWillMount() {
    // Start iBeacon detection
    Beacons.detectIBeacons();

    if(Platform.OS === 'ios') {
      Beacons.requestAlwaysAuthorization();
      Beacons.shouldDropEmptyRanges(true);
    }

    // Monitor beacons inside the region
    Beacons
    .startMonitoringForRegion(region)
    .then(() => console.log('Beacons monitoring started succesfully'))
    .catch(error => console.log(`Beacons monitoring not started, error: ${error}`));

    // Range beacons inside the region
    Beacons
    .startRangingBeaconsInRegion(region)
    .then(() => console.log('Beacons ranging started succesfully'))
    .catch(error => console.log(`Beacons ranging not started, error: ${error}`));

    if(Platform.OS === 'ios') {
      // Start update location
      Beacons.startUpdatingLocation();
    }
  }

  componentDidMount() {

    // Ranging
    this.beaconsDidRangeEvent = DeviceEventEmitter.addListener(
      'beaconsDidRange',
      (data) => {
        console.log('beaconsDidRange data: ', data);
        this.setState({ rangingDataSource: this.state.rangingDataSource.cloneWithRows(data.beacons) });
      }
    );

    // Monitoring
    this.beaconsDidEnterEvent = DeviceEventEmitter.addListener(
      'regionDidEnter',
      ({ identifier, uuid, minor, major }) => {
        console.log('monitoring - regionDidEnter data: ', { identifier, uuid, minor, major });
        const time = moment().format(TIME_FORMAT);
        this.setState({ regionEnterDatasource: this.state.rangingDataSource.cloneWithRows([{ identifier, uuid, minor, major, time }]) });

        if(Platform.OS === 'ios') {

        } 

        if(Platform.OS === 'android') {
          NotificationsAndroid.localNotification({
            title: "Local notification",
            body: "This notification was generated by the app!",
            extra: "data"
          });
        }
      }
    );

    this.regionDidExitEvent = DeviceEventEmitter.addListener(
      'regionDidExit',
      ({ identifier, uuid, minor, major }) => {
        console.log('monitoring - regionDidExit data: ', { identifier, uuid, minor, major });
        const time = moment().format(TIME_FORMAT);
        this.setState({ regionExitDatasource: this.state.rangingDataSource.cloneWithRows([{ identifier, uuid, minor, major, time }]) });

        if(Platform.OS === 'ios') {

        } 

        if(Platform.OS === 'android') {
          NotificationsAndroid.localNotification({
            title: "Local notification",
            body: "This notification was generated by the app!",
            extra: "data"
          });
        }
      }
    );
  }

  componentWillUnMount(){
    // Stop ranging beacons
    Beacons
    .stopRangingBeaconsInRegion(region)
    .then(() => console.log('Beacons ranging stopped succesfully'))
    .catch(error => console.log(`Beacons ranging not stopped, error: ${error}`));

    // Stop monitoring beacons
    Beacons
    .stopMonitoringForRegion(region)
    .then(() => console.log('Beacons monitoring stopped succesfully'))
    .catch(error => console.log(`Beacons monitoring not stopped, error: ${error}`));

    if(Platform.OS === 'ios'){
      Beacons.stopUpdatingLocation();
    }

    // Remove iBeacon events
    this.beaconsDidRangeEvent.remove();
    this.regionDidEnterEvent.remove();
    this.regionDidExitEvent.remove();
  }

  renderRangingRow = (rowData) => (
    <View style={styles.row}>
      <Text style={styles.smallText}>
        UUID: {rowData.uuid ? rowData.uuid  : 'NA'}
      </Text>
      <Text style={styles.smallText}>
        Major: {rowData.major ? rowData.major : 'NA'}
      </Text>
      <Text style={styles.smallText}>
        Minor: {rowData.minor ? rowData.minor : 'NA'}
      </Text>
      <Text>
        RSSI: {rowData.rssi ? rowData.rssi : 'NA'}
      </Text>
      <Text>
        Proximity: {rowData.proximity ? rowData.proximity : 'NA'}
      </Text>
      <Text>
        Distance: {rowData.accuracy ? rowData.accuracy.toFixed(2) : 'NA'}m
      </Text>
    </View>
  );

  renderRangingRow = (rowData) => {
    return (
      <View style={styles.row}>
        <Text style={styles.smallText}>
          UUID: {rowData.uuid ? rowData.uuid  : 'NA'}
        </Text>
        <Text style={styles.smallText}>
          Major: {rowData.major ? rowData.major : 'NA'}
        </Text>
        <Text style={styles.smallText}>
          Minor: {rowData.minor ? rowData.minor : 'NA'}
        </Text>
        <Text>
          RSSI: {rowData.rssi ? rowData.rssi : 'NA'}
        </Text>
        <Text>
          Proximity: {rowData.proximity ? rowData.proximity : 'NA'}
        </Text>
        <Text>
          Distance: {rowData.accuracy ? rowData.accuracy.toFixed(2) : 'NA'}m
        </Text>
      </View>
    );
  }


  renderMonitoringEnterRow = ({ identifier, uuid, minor, major, time }) => {
    return (
      <View style={styles.row}>
        <Text style={styles.smallText}>
          Identifier: {identifier ? identifier : 'NA'}
        </Text>
        <Text style={styles.smallText}>
          UUID: {uuid ? uuid  : 'NA'}
        </Text>
        <Text style={styles.smallText}>
          Major: {major ? major : ''}
        </Text>
        <Text style={styles.smallText}>
          Minor: { minor ? minor : ''}
        </Text>
        <Text style={styles.smallText}>
          time: { time ? time : 'NA'}
        </Text>
      </View>
    );
  }

  renderMonitoringLeaveRow = ({ identifier, uuid, minor, major, time }) => {
    return (
      <View style={styles.row}>
        <Text style={styles.smallText}>
          Identifier: {identifier ? identifier : 'NA'}
        </Text>
        <Text style={styles.smallText}>
          UUID: {uuid ? uuid  : 'NA'}
        </Text>
        <Text style={styles.smallText}>
          Major: {major ? major : ''}
        </Text>
        <Text style={styles.smallText}>
          Minor: { minor ? minor : ''}
        </Text>
        <Text style={styles.smallText}>
          time: { time ? time : 'NA'}
        </Text>
      </View>
    );
  }

  render() {
    const { bluetoothState, rangingDataSource, regionEnterDatasource, regionExitDatasource } =  this.state;

    return (
      <View style={styles.container}>
        <Text style={styles.headline}>
          ranging beacons in the area:
        </Text>
        <ListView
          dataSource={ rangingDataSource }
          enableEmptySections={ true }
          renderRow={this.renderRangingRow}
        />
        <Text style={styles.headline}>
          monitoring enter information:
        </Text>
        <ListView
          dataSource={ regionEnterDatasource }
          enableEmptySections={ true }
          renderRow={this.renderMonitoringEnterRow}
        />

        <Text style={styles.headline}>
          monitoring exit information:
        </Text>
        <ListView
          dataSource={ regionExitDatasource }
          enableEmptySections={ true }
          renderRow={this.renderMonitoringLeaveRow}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
